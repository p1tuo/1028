## pandas 讀寫MySQL資料庫

```
WIN10.OVA
安裝anaconda

安裝額外套件

```

```
pandas
sqlalchemy
pymysql

```
pandas模組提供了read_sql_query（）函式實現了對資料庫的查詢，
to_sql（）函式實現了對資料庫的寫入，並不需要實現新建MySQL資料表。
sqlalchemy模組實現了與不同資料庫的連線，
而pymysql模組則使得Python能夠操作MySQL資料庫。
```

## MySQL

```
https://tech.digitgeek.net/t/51.html
mysql->CREATE DATABASE dbname;//建立資料庫 

mysql->CREATE TABLE tablename;//建立表 

               CREATE TABLE tablename (colname1 varchar(15), colname2 int(8), colname3 date);

mysql->SHOW DATABASES;//顯示資料庫資訊，有那些可用的資料庫。 

mysql->USE dbname;//選擇資料庫 

mysql->SHOW TABLES;//顯示表資訊，有那些可用的表

mysql->DESCRIBE tablename;//顯示建立的表的資訊


pip install sqlalchemy
物件關係對映技術，即ORM（Object-Relational Mapping）技術，指的是把關聯式資料庫的表結構對映到物件上，
通過使用描述物件和資料庫之間對映的後設資料，將程式中的物件自動持久化到關聯式資料庫中。
  
在Python中，最有名的ORM框架是SQLAlchemy

https://codertw.com/%E8%B3%87%E6%96%99%E5%BA%AB/16156/

SQLAlchemy模組提供了create_engine()函式用來初始化資料庫連線，

SQLAlchemy用一個字串表示連線資訊：

‘資料庫型別 資料庫驅動名稱://使用者名稱:口令@機器地址:埠號/資料庫名’
# -*- coding: utf-8 -*-
# 匯入必要模組
import pandas as pd
from sqlalchemy import create_engine


# 初始化資料庫連線，使用pymysql模組
# MySQL的使用者：root, 密碼:147369, 埠：3306,資料庫：mydb
engine = create_engine('mysql pymysql://root:147369@localhost:3306/mydb')


# 查詢語句，選出employee表中的所有資料
sql = '''
select * from employee;
'''

# read_sql_query的兩個引數: sql語句， 資料庫連線
df = pd.read_sql_query(sql, engine)

# 輸出employee表的查詢結果
print(df)

```

## Redis

```
Redis ( REmote DIctionary Server )
Redis 是一個開源的NoSQL資料庫。
高效能 ( in-memory )的 Key-Value 的儲存系統。
支援多種數據結構如：string、hash、list、set、sorted set、bitmap、hyperloglog。
版本 3.0 後支援數據備份，為 Master-Slave 模式的備份
https://dotblogs.com.tw/zackmyself/2017/04/27/005621

https://github.com/microsoftarchive/redis/releases

https://marcus116.blogspot.com/2019/02/how-to-install-redis-in-windows-os.html

http://dog0416.blogspot.com/2017/03/redis-redis-window-mac.html

redis-cli info 看 command 工具版本號
How to set/get pandas.DataFrame to/from Redis?
https://stackoverflow.com/questions/37943778/how-to-set-get-pandas-dataframe-to-from-redis

Using Redis with Python to Analyze COVID-19 Data - RedisConf 2020
https://www.youtube.com/watch?v=mdC9idz-Ois

https://github.com/dmitrypol/covid19

https://github.com/dmitrypol/redis_data
https://github.com/dmitrypol

```
## MongoDB

```
將資料讀取至 DataFrame 後，做完前處理將 DataFrame 中的資料儲存至 MongoDB。
``
前置步驟 需要先安裝 MongoDB 透過 pip install 安裝 pymongo lib pip install pymongo

https://oranwind.org/python-pandas-ji-chu-jiao-xue-2/

import pandas as pd # 引用套件並縮寫為 pd
from pymongo import MongoClient

def data_to_dataframe():

groups = ["Movies", "Sports", "Coding", "Fishing", "Dancing", "cooking"]
num = [46, 8, 12, 12, 6, 58]

dict = {"groups": groups,
        "num": num
       }

select_df = pd.DataFrame(dict)
dataframe_to_mongo(select_df)
def dataframe_to_mongo(select_df):

client = MongoClient()
database = client["db_name"]  # SQL: Database Name
collection = database["collection"]   # SQL: Table Name


records = select_df.to_dict('records') # 參數 record 代表把列轉成個別物件
collection.insert_many(records)
def main():
data_to_dataframe()

if name == "main":
main()

使用Python從MongoDB抓取每日股價資料與使用pandas進行分析

https://sites.google.com/site/zsgititit/home/python-cheng-shi-she-ji/shi-yongpython-congmongodb-zhua-qu-mei-ri-gu-jia-zi-liao-yu-shi-yongpandas-jin-xing-fen-xi

使用collection.find從指定的MongoDB讀取資料放置於DataFrame， 接著整理資料，最後使用DataFrame功能進行資料分析。

本程式GitHub網址如下 https://github.com/jang0820/Stock/blob/master/FromMongoToDataFrame.py
```
```
import pandas as pd import datetime import matplotlib.pyplot as pp import pymongo MONGO_HOST = 'localhost' MONGO_DB = 'TwStock' MONGO_COLLETION = 'twse' from pymongo import MongoClient

http://www.twse.com.tw/exchangeReport/STOCK_DAY?date=20180817&stockNo=2330
def connect_mongo(): #連線資料庫 global collection client = MongoClient(MONGO_HOST, 27017) db = client[MONGO_DB] collection = db[MONGO_COLLETION]

connect_mongo() #呼叫連線資料庫函式 query = { 'stockno' : '2892' } cursor = collection.find(query) #依query查詢資料 stock = pd.DataFrame(list(cursor)) #轉換成DataFrame del stock['_id'] #刪除欄位_id print(stock) indexlist = [] for i in range(len(stock)): #建立日期串列 indexlist.append(stock['date'][i]) #stock['date'][i]為datetime.date物件 stock.index = indexlist #索引值改成日期 stock = stock.drop(['date'],axis = 1) #刪除日期欄位 mlist = [] for item in stock.index: #建立月份串列 mlist.append(item.month) stock['month'] = mlist #新增月份欄位 #print(stock) result = stock for item in result[result.close > 21]: #收盤價大於21元 print(item)

print(result[(result.index >= "2018-06-01") & (result.index <= "2018-06-30") & (result.close >= 21)]) #六月份大於21元

tmp = result.sort_values(by = 'close', ascending=False) #依照收盤價排序 print(tmp[:3]) #取收盤價前三高

print(result.loc["2018-06-01":"2018-06-30"]) #只顯示2018六月份

print(result.loc["2018-01-01":"2018-12-31"].groupby('month').close.count()) #2018每個月幾個營業日

print(result.loc["2018-01-01":"2018-12-31"].groupby('month').shares.sum()) #2018每個月累計成交股數

result.loc["2018-01-01":"2018-12-31"].groupby('month').shares.sum().plot() #2018月累計成交股數圖 pp.ylabel('shares') pp.title('month of shares')
```


